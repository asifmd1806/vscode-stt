name: Release and Publish

on:
  push:
    branches:
      - master # Or 'main' if that's your default branch

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to push version bump commit & tag, and create release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for commit history analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci # Use 'ci' for cleaner installs in CI environments

      - name: Determine version bump
        id: bump
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG" # Added for debugging
          if [[ $COMMIT_MSG == *"BREAKING CHANGE"* ]] || [[ $COMMIT_MSG == *"!:"* ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
            echo "Detected bump type: major"
          elif [[ $COMMIT_MSG == *"feat:"* ]] || [[ $COMMIT_MSG == *"feat("* ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
            echo "Detected bump type: minor"
          else
            echo "type=patch" >> $GITHUB_OUTPUT
            echo "Detected bump type: patch"
          fi

      - name: Get current version
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_VERSION=${{ steps.version.outputs.current }}
          BUMP_TYPE=${{ steps.bump.outputs.type }}

          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"

          case $BUMP_TYPE in
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
              ;;
            patch)
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
          esac

          echo "Calculated new version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update version in package.json
        run: |
          NEW_VERSION=${{ steps.new_version.outputs.version }}
          echo "Updating package.json to version $NEW_VERSION"
          # Use --allow-same-version in case the logic results in no change (e.g., only chore commits trigger patch)
          npm version $NEW_VERSION --no-git-tag-version --allow-same-version

      - name: Build and Package Extension
        run: |
          echo "Running prepublish script (includes webpack build)..."
          npm run vscode:prepublish
          echo "Listing VSIX files:"
          ls -la *.vsix

      - name: Publish to VS Code Marketplace
        run: npx @vscode/vsce publish --packagePath *.vsix
        env:
          VSCE_PAT: ${{ secrets.PUBLISHER_SECRET }}

      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: speech-to-text-stt-${{ steps.new_version.outputs.version }}
          path: "*.vsix"
          if-no-files-found: error # Error if the vsix wasn't created

      - name: Commit, Tag, and Push version bump
        run: |
          NEW_VERSION=${{ steps.new_version.outputs.version }}
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          # Add only package files
          git add package.json package-lock.json
          # Commit only if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "chore: bump version to ${NEW_VERSION} [skip ci]"
            echo "Committed version bump to ${NEW_VERSION}"
          else
            echo "No version changes to commit."
          fi
          echo "Tagging release as v${NEW_VERSION}"
          git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}"
          echo "Pushing tag..."
          git push origin "v${NEW_VERSION}"
          echo "Pushing commit..."
          git push

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2 # Updated to v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: "*.vsix" # Attach the vsix file to the release
          draft: false
          prerelease: false
          name: Release v${{ steps.new_version.outputs.version }}
          tag_name: v${{ steps.new_version.outputs.version }}
          generate_release_notes: true # Automatically generate release notes from commits
