name: Release and Publish

on:
  push:
    branches:
      - main 
    paths-ignore:
      - '**.md'
      - '.vscode/**'
      - '.github/**'
      - '!.github/workflows/release.yaml'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for version bump commit, tag, and release creation
      packages: write # Required for publishing to GitHub Packages (if needed)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for commit history analysis
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg build-essential python3 # Required for audio processing and native modules

      - name: Install dependencies
        run: |
          # Install all dependencies using clean install. 
          # This will run install scripts for all packages, including speech-recorder's attempt to prebuild-install.
          npm ci
          
      - name: Determine version bump
        id: bump
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Last commit message: $COMMIT_MSG"
          if [[ $COMMIT_MSG == *"BREAKING CHANGE"* ]] || [[ $COMMIT_MSG == *"!:"* ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
            echo "Detected bump type: major"
          elif [[ $COMMIT_MSG == *"feat:"* ]] || [[ $COMMIT_MSG == *"feat("* ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
            echo "Detected bump type: minor"
          else
            echo "type=patch" >> $GITHUB_OUTPUT
            echo "Detected bump type: patch"
          fi

      - name: Get current version
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_VERSION=${{ steps.version.outputs.current }}
          BUMP_TYPE=${{ steps.bump.outputs.type }}

          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"

          case $BUMP_TYPE in
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
              ;;
            patch)
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
          esac

          echo "Calculated new version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update version in package.json
        run: |
          NEW_VERSION=${{ steps.new_version.outputs.version }}
          echo "Updating package.json to version $NEW_VERSION"
          npm version $NEW_VERSION --no-git-tag-version --allow-same-version

      - name: Build and Package Extension
        id: package
        run: |
          echo "Running webpack build (npm run package should trigger this, which now includes asset relocation)..."
          # The package script in package.json calls: webpack --mode production --devtool hidden-source-map
          # This will now use our updated webpack.config.js with the asset relocator.
          npm run package 
          
          # Verify native modules are in dist (webpack should have placed them there)
          # The exact path might vary based on AssetRelocatorLoader config, default is usually just in dist/
          # Let's check for speechrecorder.node directly in dist or a common subdirectory like 'native_modules' if specified in webpack
          if [ ! -f "dist/extension.js" ]; then
            echo "Error: extension.js not found in dist/ after webpack build!"
            exit 1
          fi
          
          echo "Build verification passed. Proceeding with packaging..."
          
          echo "Creating VSIX package..."
          npx @vscode/vsce package # This command itself runs npm run vscode:prepublish, which runs npm run package again.
                                 # This is redundant but usually harmless. Consider optimizing package.json scripts later.

          # Verify VSIX was created
          VSIX_COUNT=$(ls -1 *.vsix 2>/dev/null | wc -l)
          if [ "$VSIX_COUNT" -eq "0" ]; then
            echo "Error: No VSIX file was created!"
            exit 1
          fi
          
          VSIX_FILE=$(ls *.vsix)
          echo "Created VSIX: $VSIX_FILE"
          echo "vsix_path=$VSIX_FILE" >> $GITHUB_OUTPUT
          
          # Verify VSIX contains required files
          echo "Verifying VSIX contents..."
          # Check for essential files
          npx @vscode/vsce ls "$VSIX_FILE" | grep -E "extension/dist/extension\.js|extension/package\.json" || {
            echo "Error: Essential files not found in VSIX package!"
            echo "Full VSIX contents:"
            npx @vscode/vsce ls "$VSIX_FILE" --tree
            exit 1
          }

      - name: Verify VSIX package
        run: |
          VSIX_PATH="${{ steps.package.outputs.vsix_path }}"
          echo "Verifying VSIX package: $VSIX_PATH"
          
          # Check file exists and has size
          if [ ! -s "$VSIX_PATH" ]; then
            echo "Error: VSIX file is empty or doesn't exist!"
            exit 1
          fi
          
          # List contents (this will fail if VSIX is corrupt)
          npx @vscode/vsce ls "$VSIX_PATH"

      - name: Publish to VS Code Marketplace
        run: |
          if [ -z "${{ secrets.PUBLISHER_SECRET }}" ]; then
            echo "Error: PUBLISHER_SECRET is not set!"
            exit 1
          fi
          npx @vscode/vsce publish --packagePath "${{ steps.package.outputs.vsix_path }}"
        env:
          VSCE_PAT: ${{ secrets.PUBLISHER_SECRET }}

      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: speech-to-text-stt-${{ steps.new_version.outputs.version }}
          path: ${{ steps.package.outputs.vsix_path }}
          if-no-files-found: error

      - name: Commit version bump
        id: commit
        run: |
          NEW_VERSION=${{ steps.new_version.outputs.version }}
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git add package.json package-lock.json
          if ! git diff --staged --quiet; then
            git commit -m "chore: bump version to ${NEW_VERSION} [skip ci]"
            echo "committed=true" >> $GITHUB_OUTPUT
            echo "Committed version bump to ${NEW_VERSION}"
          else
            echo "committed=false" >> $GITHUB_OUTPUT
            echo "No version changes to commit"
          fi

      - name: Create and push tag
        run: |
          NEW_VERSION=${{ steps.new_version.outputs.version }}
          echo "Checking if tag v${NEW_VERSION} exists..."
          
          # Check if tag exists
          if git rev-parse "v${NEW_VERSION}" >/dev/null 2>&1; then
            echo "Tag v${NEW_VERSION} already exists, skipping tag creation"
          else
            echo "Creating tag v${NEW_VERSION}"
          git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}"
          fi
          
          # Push changes (both commit if exists and tag)
          if [[ "${{ steps.commit.outputs.committed }}" == "true" ]]; then
            git push
          fi
          git push origin "v${NEW_VERSION}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ steps.package.outputs.vsix_path }}
          draft: false
          prerelease: false
          name: Release v${{ steps.new_version.outputs.version }}
          tag_name: v${{ steps.new_version.outputs.version }}
          generate_release_notes: true
          fail_on_unmatched_files: true
          body: |
            ## What's Changed
            
            ${{ github.event.head_commit.message }}
            
            ## Installation
            
            1. Download the VSIX file from the assets below
            2. In VS Code, go to Extensions view
            3. Click "..." menu and select "Install from VSIX..."
            4. Choose the downloaded file
            
            Or install directly from the [VS Code Marketplace](https://marketplace.visualstudio.com/items?itemName=asif.speech-to-text-stt)

      - name: Handle Failure
        if: failure()
        run: |
          echo "::error::Release workflow failed! Please check the logs above for details."
          # You could add additional failure handling here, like notifications
